#!/usr/bin/env bash

# git-stagelight
# https://github.com/hyperfekt/git-stagelight
# version 1.2.0

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.



set -e

# used to remember previously seen unstaged files
previousfile=".git/info/stagelight"
# git's local equivalent of .gitignore
excludefile=".git/info/exclude"

# gain access to the terminal if we're being run interactively
exec < /dev/tty || exit 0

function print {
    printf "%s" "$1"
}

function descend {
    # git ls-files -o --directory shows only a directory only if all files in it or its subfolders are unstaged
    # ergo if there is more than one file in it, they are all unstaged, but if there is only one we should just show that instead
    if [[ -d "$1" && ! -L "$1" ]]; then
        mapfile -d '' -t inner < <(stdbuf -oL git ls-files -o -z --directory --no-empty-directory --exclude-standard --exclude-from="$previousfile" "$1/" | head -z -n 2)
        if [[ ${#inner[@]} -eq 1 ]]; then
            descend "${inner[0]}"
        else
            printf "%s\0" "$1/"
        fi
    else
        printf "%s\0" "$1"
    fi
}

function uniquedir {
    while read -d '' -r path; do
        if [[ ! -v prevcommon[@] ]]; then
            mapfile -d '/' -t prevcommon < <(print "$path")
        else
            mapfile -d '/' -t components < <(print "$path")
            if [[ ${prevcommon[0]} == ${components[0]} ]]; then
                let i=1
                # git ls-files always returns files in folders before files in their subfolders, meaning $prevcommon never has more path elements than the current path
                while [[ $i -lt $lencommon && "${prevcommon[$i]}" == "${components[$i]}" ]]; do
                    let i+=1
                done
                prevcommon="${prevcommon[@]:0:$i}"
                lencommon=$i
            else
                # output previously found most common path
                IFS='/'; descend "${prevcommon[*]}"
                # start anew with full path
                mapfile -d '/' -t prevcommon < <(print "$path")
                lencommon=${#prevcommon[@]}
            fi
        fi
    done < <(stdbuf -oL git ls-files -o -z --directory --no-empty-directory --exclude-standard --exclude-from="$previousfile" ".")
    IFS='/'; descend "${prevcommon[*]}"
}

function truncate {
    IFS=';'; read -sdR -p $'\E[6n' ROW COL
    termwidth=$(tput cols)
    if [[ -z $2 ]]; then
        buffer=0
    else
        buffer=$2
    fi
    length=$(($termwidth-$COL-$buffer+1))
    print "$1" | awk -v len="$length" '
        BEGIN {
            RS = "\0"
        }
        {
            if (length($0) > len)
                printf("%s%s", substr($0, 1, len-1), "…")
            else
                printf("%s", $0)
        }'
}

function list {
    # leave enough space for '  contains: '
    contents="$(truncate "$(head -c -1 <&3 | head -c $((4*$(tput cols))) | tr '\0' ' ')" 12)"
    tput civis
    tput sc
    printf "%s" "  contains: $contents"
    tput rc
    tput cnorm
}

function discard {
    kill $contains >/dev/null 2>/dev/null || true >/dev/null
    wait $contains >/dev/null 2>/dev/null || true >/dev/null
    kill -- -$contains >/dev/null 2>/dev/null || true >/dev/null
    kill -- -$enter >/dev/null 2>/dev/null || true >/dev/null
}

function escape {
    print "$1" | awk '
        BEGIN {
            RS = "\0"
            FS = "\n"
        }
        {
            if (NF == 1)
                printf("%s", gensub(/\\\r/, "[\r]", "g", gensub(/[^/[:alnum:]]/, "\\\\&", "g", $0)))
            else
                print "Error: Newlines are inexpressible in the gitignore format." > "/dev/stderr"
                exit 1
        }'
}

function indir {
    (cd "$1"; uniquedir >&3 &)
    print "$!"
}

function prompt {
    while read -u 3 -d '' -r path; do
        if [[ -n "$1" ]]; then
            path="$1$path"
        fi
        if [[ -d "$path" && ! -L "$path" ]]; then
            tput civis
            # leave enough space for ' █ contains: x…'
            truncate "$path" 15
            print " "
            tput cnorm
            contentsA=$(mktemp -u)
            contentsB=$(mktemp -u)
            if mkfifo "$contentsA" && mkfifo "$contentsB"; then
                (cd "$path"; uniquedir > >(tee "$contentsA" "$contentsB" >/dev/null) &)
                enter=$!
                exec 5<"$contentsA"
                exec 6<"$contentsB"
                rm "$contentsA"
                rm "$contentsB"
                list 3<&5 <&0 &
                contains=$!
                exec 5>&-
            fi
        else
            tput civis
            # leave enough space for ' excluded.'
            truncate "$path" 10
            print " "
            tput cnorm
        fi
        while true; do
            stty -echo
            read -n 1 -r
            stty echo
            if [[ "$REPLY" == "s" ]]; then
                discard
                tput el
                git ls-files -o -z --exclude-standard --exclude-from="$previousfile" "$path" | git update-index --add -z --stdin
                echo "staged."
                break
            elif [[ "$REPLY" == "o" ]]; then
                discard
                tput el
                line=$(escape "$path" || true)
                if [[ -n $line ]]; then
                    echo "$line" >> "$previousfile"
                    echo "omitted."
                fi
                break
            elif [[ "$REPLY" == "e" ]]; then
                discard
                tput el
                line=$(escape "$path" || true)
                if [[ -n $line ]]; then
                    echo "$line" >> "$excludefile"
                    echo "excluded."
                fi
                break
            elif [[ -z "$REPLY" && -d "$path" && ! -L "$path" ]]; then
                kill $contains >/dev/null 2>/dev/null || true
                wait $contains >/dev/null 2>/dev/null || true
                kill -- -$contains >/dev/null 2>/dev/null || true
                tput el
                tput civis
                printf "\r"
                prompt "$path" 3<&6
                exec 6>&-
                break
            fi
        done
    done
}

function ul {
    printf "\e[4m%s\e[0m" "$1"
}

touch "$previousfile"
touch "$excludefile"
# wait for only one line, fast abort
if [[ -n "$(stdbuf -oL git ls-files -o --directory --no-empty-directory --exclude-standard --exclude-from="$previousfile" "." | head -n 1)" ]]; then
    echo "New unstaged files ($(ul s)tage, $(ul o)mit, $(ul e)xclude, or ↵ to enter directory):"
    prompt 3< <(uniquedir)
    mapfile -td '' cmd < <(cat /proc/$PPID/cmdline)
    eval "${cmd[@]}"
    result=$?
    if command -v gdb >/dev/null; then
        gdb --batch --eval-command "call (void)exit($result)" --pid $PPID >/dev/null 2>/dev/null
    else
        if [[ $result -eq 0 ]]; then
            echo -n "commit successful, ignore exit code (install gdb to exit with 0 instead)" >&2
        else
            echo "commit failed with exit code $result" >&2
        fi
        exit 1
    fi
fi
